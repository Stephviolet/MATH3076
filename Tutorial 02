# These are just in case you might need them later. 
import numpy as np
import matplotlib.pyplot as plt

#class: a set or category of things having some property or attribute in common and differentiated from others by kind, type, or quality.
#object:one of instances of the class. which can perform the functionalities which are defined in the class.
class Polynomial:
    #__init__ is a constructor for the class 'polynomial'
    def __init__(self,coefficients={0:0}): #place all initial attributes for polynomial: have one, coefficients as a dictionary.
        self.coefficients = coefficients
        if self.coefficients == {}: #if no coefficients
            self.coefficients[0]=0 # add 0x^0 to polynomial
    
    # degree is a method build for Polynomial: find the degree of poly
    def degree(self): 
        #degree of poly is the highest degree (key) in dict.
        return max(list(self.coefficients)) 
    
    # __call__: template to call the already instantiated class to do something 
    def __call__(self,point,raw=False): 
        #self.coff = c, point = x
        c, x  = self.coefficients, point
        if isinstance(point,str): # if point is a string
            y = ''
            for i in c: #why: is this building polynomial?
                if c[i] != 0: 
                    y += ' + %g*%s**%d' % (c[i], x, i) 
            if (not raw): #why: what is this/ how does it work?
                # Clean up formatting 
                y = y.replace('+ -', '- ')
                y = y.replace('*'+ x +'**0', '')
                y = y.replace(' 1*', ' ')
                y = y.replace( x +'**1 ', x +' ')
                if y[0:3] == ' + ': y =       y[3:]        
                if y[0:3] == ' - ': y = '-' + y[3:]
                if y[-3:] == '**1': y =       y[:-3]
                if y == '': y='0'
        else: # point is a number
            y = 0
            for i in c: y += c[i]*(x**i)
        return y
    
    #define methods associated with polynomials
    # self.derivative()
    def derivative(self,n=1):
        if n==0: 
            return Polynomial(self.coefficients)
        d = {}
        for i in self.coefficients:
            a = i
            for k in range(1,n): 
                a *= (i-k)
            if i>n-1: 
                d[i-n] = a*self.coefficients[i]
        return Polynomial(d)
    
    # -self 
    def __neg__(self):
        for value in coefficients.values():
            coefficients[value] *= -1 #gives an Attribute error
        return Polynomial()
  
    # self == other
    """def __eq__(self,other):
        #check polys have same degree
        if self.degree() == other.degree():
            return True
            #check coefficients are equal
            for c in self.coefficients.values():
                for d in other.coefficients.values():
                    if self.coefficients[c] == other.coefficients[d]:
                        return True #Boolhas no attribute error
                    else:                                             
                        return False
        #check poly powers are equal
        else:
            return False"""
        
    
